version: 2

defaults: &defaults
  docker:
    - image: ubuntu:18.04
  steps:
    - checkout
    - run:
        name: setup prerequisites
        command: apt-get update && apt-get install -y  expect-dev wget git build-essential file cpio unzip python bc
    - run:
        name: Prepare build
        command: |
             cd cherokee && bash build.sh
        no_output_timeout: 1200
    - run:
        name: Prepare config
        command: |
             cd cherokee/${target}/buildroot-${BUILDROOT_VERSION}/ && cat configs/${target}_defconfig ../../glibc_defconfig ../../cherokee_defconfig > configs/cherokee-${target}_defconfig && make defconfig cherokee-${target}_defconfig
        no_output_timeout: 1200
    - run:
        name: Build toolchain
        command: |
             cd cherokee/${target}/buildroot-${BUILDROOT_VERSION}/ && make toolchain
        no_output_timeout: 1200
    - run:
        name: Build host-cmake
        command: |
             cd cherokee/${target}/buildroot-${BUILDROOT_VERSION}/ && \
             [ -d output/build/host-cmake ] || make BR2_JLEVEL=2 host-cmake-rebuild
        no_output_timeout: 1200
    - run:
        name: Build kernel
        command: |
             cd cherokee/${target}/buildroot-${BUILDROOT_VERSION}/ && \
             [ -d output/build/linux-9126e25b0934bd7bd843763310ea4b34c6e139d0 ] || make linux-rebuild
        no_output_timeout: 1200
    - run:
        name: Build qt5base
        command: |
             cd cherokee/${target}/buildroot-${BUILDROOT_VERSION}/ && \
             [ -d output/build/qt5base-5.9.1 ] || make BR2_JLEVEL=2 qt5base-rebuild
        no_output_timeout: 1200
    - run:
        name: Build qtdeclarative
        command: |
             cd cherokee/${target}/buildroot-${BUILDROOT_VERSION}/ && \
             [ -d output/build/qt5declarative-5.9.1 ] || make BR2_JLEVEL=2 qt5declarative-rebuild
        no_output_timeout: 1200
    - run:
        name: Build image
        command: |
             cd cherokee/${target}/buildroot-${BUILDROOT_VERSION}/ && make \
    - run:
        name: Prepare artifacts
        command: |
            mkdir cherokee/${target}/artifacts/ &&
                mv cherokee/${target}/buildroot-${BUILDROOT_VERSION}/output/images \
                cherokee/${target}/artifacts/images-${BUILDROOT_VERSION}
        no_output_timeout: 1200
    - store_artifacts:
        path: cherokee/raspberrypi2/artifacts/
    - store_artifacts:
        path: cherokee/raspberrypi3/artifacts/


jobs:
  raspberrypi2:
    <<: *defaults
    environment:
      target: raspberrypi2
      BUILDROOT_VERSION: "2018.02.7"
  raspberrypi3:
    <<: *defaults
    environment:
      target: raspberrypi3
      BUILDROOT_VERSION: "2018.02.7"
  speedsaver_orangepi:
    environment:
      target: orangepi_zero
      BUILDROOT_VERSION: "650818fb3a6fb7b9bd9fcefabbc187c1bbe95e0a"
    docker:
      - image: ubuntu:18.04
    steps:
      - checkout
      - run:
          name: setup prerequisites
          command: apt-get update && apt-get install -y  expect-dev wget git build-essential file cpio unzip python bc bison flex
      - run:
          name: Prepare build
          command: |
               cd speedsaver && bash build.sh
          no_output_timeout: 1200
      - run:
          name: Prepare config
          command: |
            cd speedsaver/${target}/buildroot-${BUILDROOT_VERSION}/ && \
            cat configs/${target}_defconfig \
                ../../glibc_defconfig \
                ../../navit_defconfig \
                ../../speedsaver_defconfig > \
            configs/speedsaver-${target}_defconfig && make defconfig speedsaver-${target}_defconfig
          no_output_timeout: 1200
      - restore_cache:
         keys:
           - cache-{{ .Environment.CIRCLE_JOB }}-toolchain-{{ checksum "speedsaver/glibc_defconfig" }}
      - run:
          name: Download sources
          command: |
               cd speedsaver/${target}/buildroot-${BUILDROOT_VERSION}/ && make source
          no_output_timeout: 1200
      - run:
          name: Build toolchain
          command: |
               cd speedsaver/${target}/buildroot-${BUILDROOT_VERSION}/ && make toolchain
          no_output_timeout: 1200
      - run:
          name: Build host-cmake
          command: |
               cd speedsaver/${target}/buildroot-${BUILDROOT_VERSION}/ && \
               [ -d output/build/host-cmake ] || make BR2_JLEVEL=2 host-cmake-rebuild
          no_output_timeout: 1200
      - save_cache:
          key: cache-{{ .Environment.CIRCLE_JOB }}-toolchain-{{ checksum "speedsaver/glibc_defconfig" }}
          paths:
            - "speedsaver/orangepi_zero/buildroot-${BUILDROOT_VERSION}/output/host/"
            - "speedsaver/orangepi_zero/buildroot-${BUILDROOT_VERSION}/output/build/"
      - restore_cache:
         keys:
           - cache-{{ .Environment.CIRCLE_JOB }}-kernel-9126e25b0934bd7bd843763310ea4b34c6e139d0
      - run:
          name: Build kernel
          command: |
               cd speedsaver/${target}/buildroot-${BUILDROOT_VERSION}/ && \
               [ -d output/build/linux-9126e25b0934bd7bd843763310ea4b34c6e139d0 ] || make linux-rebuild
          no_output_timeout: 1200
      - save_cache:
          key: cache-{{ .Environment.CIRCLE_JOB }}-kernel-9126e25b0934bd7bd843763310ea4b34c6e139d0
          paths:
            - "speedsaver/orangepi_zero/buildroot-${BUILDROOT_VERSION}/output/linux-9126e25b0934bd7bd843763310ea4b34c6e139d0/"
      - run:
          name: Download maps
          command: |
               wget -q --show-progress --progress=dot:mega --no-check-certificate $MAPS_URL -O maps.zip && \
               unzip maps.zip -d speedsaver/overlay/usr/share/navit/maps/ && \
               mv speedsaver/overlay/usr/share/navit/maps/*/*.{bin,xml} speedsaver/overlay/usr/share/navit/maps/
      - run:
          name: Build image
          command: |
               cd speedsaver/${target}/buildroot-${BUILDROOT_VERSION}/ && make
      - run:
          name: Prepare artifacts
          command: |
               mkdir speedsaver/output/ && \
               mv speedsaver/${target}/buildroot-${BUILDROOT_VERSION}/output/images/sdcard.img speedsaver/output/speedsaver-${target}-${CIRCLE_SHA1}.img
          no_output_timeout: 1200
      - store_artifacts:
          path: speedsaver/output

  powertune_raspberrypi3:
    environment:
      target: raspberrypi3
      BUILDROOT_VERSION: "650818fb3a6fb7b9bd9fcefabbc187c1bbe95e0a"
    docker:
      - image: ubuntu:18.04
    steps:
      - checkout
      - run:
          name: setup prerequisites
          command: apt-get update && apt-get install -y  expect-dev wget git build-essential file cpio unzip python bc bison flex
      - run:
          name: Prepare build
          command: |
               cd powertune && bash build.sh
          no_output_timeout: 1200
      - run:
          name: Prepare config
          command: |
            cd powertune/${target}/buildroot-${BUILDROOT_VERSION}/ && \
            cat configs/${target}_defconfig \
                ../../glibc_defconfig \
                ../../powertune_defconfig > \
            configs/powertune-${target}_defconfig && make defconfig powertune-${target}_defconfig
          no_output_timeout: 1200
      - restore_cache:
         keys:
           - cache-{{ .Environment.CIRCLE_JOB }}-toolchain-{{ checksum "powertune/glibc_defconfig" }}
      - run:
          name: Download sources
          command: |
               cd powertune/${target}/buildroot-${BUILDROOT_VERSION}/ && make source
          no_output_timeout: 1200
      - run:
          name: Build toolchain
          command: |
               cd powertune/${target}/buildroot-${BUILDROOT_VERSION}/ && make toolchain
          no_output_timeout: 1200
      - run:
          name: Build host-cmake
          command: |
               cd powertune/${target}/buildroot-${BUILDROOT_VERSION}/ && \
               [ -d output/build/host-cmake ] || make BR2_JLEVEL=2 host-cmake-rebuild
          no_output_timeout: 1200
      - save_cache:
          key: cache-{{ .Environment.CIRCLE_JOB }}-toolchain-{{ checksum "powertune/glibc_defconfig" }}
          paths:
            - "powertune/orangepi_zero/buildroot-${BUILDROOT_VERSION}/output/host/"
            - "powertune/orangepi_zero/buildroot-${BUILDROOT_VERSION}/output/build/"
      - restore_cache:
         keys:
           - cache-{{ .Environment.CIRCLE_JOB }}-kernel-9126e25b0934bd7bd843763310ea4b34c6e139d0
      - run:
          name: Build kernel
          command: |
               cd powertune/${target}/buildroot-${BUILDROOT_VERSION}/ && \
               [ -d output/build/linux-9126e25b0934bd7bd843763310ea4b34c6e139d0 ] || make linux-rebuild
          no_output_timeout: 1200
      - save_cache:
          key: cache-{{ .Environment.CIRCLE_JOB }}-kernel-9126e25b0934bd7bd843763310ea4b34c6e139d0
          paths:
            - "powertune/orangepi_zero/buildroot-${BUILDROOT_VERSION}/output/linux-9126e25b0934bd7bd843763310ea4b34c6e139d0/"
      - run:
          name: Build image
          command: |
               cd powertune/${target}/buildroot-${BUILDROOT_VERSION}/ && make
      - run:
          name: Prepare artifacts
          command: |
               mkdir powertune/output/ && \
               mv powertune/${target}/buildroot-${BUILDROOT_VERSION}/output/images/sdcard.img powertune/output/powertune-${target}-${CIRCLE_SHA1}.img
          no_output_timeout: 1200
      - store_artifacts:
          path: powertune/output


  speedsaver_raspberrypi0:
    environment:
      target: raspberrypi0
      BUILDROOT_VERSION: "650818fb3a6fb7b9bd9fcefabbc187c1bbe95e0a"
    docker:
      - image: ubuntu:16.04
    steps:
      - checkout
      - run:
          name: setup prerequisites
          command: apt-get update && apt-get install -y  expect-dev wget git build-essential file cpio unzip python bc bison flex
      - run:
          name: Prepare build
          command: |
               cd speedsaver && bash build.sh
          no_output_timeout: 1200
      - run:
          name: Prepare config
          command: |
            cd speedsaver/${target}/buildroot-${BUILDROOT_VERSION}/ && \
            cat configs/${target}_defconfig \
                ../../glibc_defconfig \
                ../../navit_defconfig \
                ../../speedsaver_defconfig > \
            configs/speedsaver-${target}_defconfig && make defconfig speedsaver-${target}_defconfig
          no_output_timeout: 1200
      - restore_cache:
         keys:
           - cache-{{ .Environment.CIRCLE_JOB }}-toolchain-{{ checksum "speedsaver/glibc_defconfig" }}
      - run:
          name: Download sources
          command: |
               cd speedsaver/${target}/buildroot-${BUILDROOT_VERSION}/ && make source
          no_output_timeout: 1200
      - run:
          name: Build toolchain
          command: |
               cd speedsaver/${target}/buildroot-${BUILDROOT_VERSION}/ && make toolchain
          no_output_timeout: 1200
      - run:
          name: Build host-cmake
          command: |
               cd speedsaver/${target}/buildroot-${BUILDROOT_VERSION}/ && \
               [ -d output/build/host-cmake ] || make BR2_JLEVEL=2 host-cmake-rebuild
          no_output_timeout: 1200
      - save_cache:
          key: cache-{{ .Environment.CIRCLE_JOB }}-toolchain-{{ checksum "speedsaver/glibc_defconfig" }}
          paths:
            - "speedsaver/orangepi_zero/buildroot-${BUILDROOT_VERSION}/output/host/"
            - "speedsaver/orangepi_zero/buildroot-${BUILDROOT_VERSION}/output/build/"
      - restore_cache:
         keys:
           - cache-{{ .Environment.CIRCLE_JOB }}-kernel-9126e25b0934bd7bd843763310ea4b34c6e139d0
      - run:
          name: Build kernel
          command: |
               cd speedsaver/${target}/buildroot-${BUILDROOT_VERSION}/ && \
               [ -d output/build/linux-9126e25b0934bd7bd843763310ea4b34c6e139d0 ] || make linux-rebuild
          no_output_timeout: 1200
      - save_cache:
          key: cache-{{ .Environment.CIRCLE_JOB }}-kernel-9126e25b0934bd7bd843763310ea4b34c6e139d0
          paths:
            - "speedsaver/orangepi_zero/buildroot-${BUILDROOT_VERSION}/output/linux-9126e25b0934bd7bd843763310ea4b34c6e139d0/"
      - run:
          name: Build image
          command: |
               cd speedsaver/${target}/buildroot-${BUILDROOT_VERSION}/ && make
      - run:
          name: Prepare artifacts
          command: |
               mkdir speedsaver/output/ && \
               mv speedsaver/${target}/buildroot-${BUILDROOT_VERSION}/output/images/sdcard.img speedsaver/output/speedsaver-${target}-${CIRCLE_SHA1}.img
          no_output_timeout: 1200
      - store_artifacts:
          path: speedsaver/output

workflows:
  version: 2
  build_everything:
    jobs:
      - powertune_raspberrypi3
